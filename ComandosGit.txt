1. Crear la carpeta de nuestro repositorio
2. en la consola gitbash inicializar con 
	'git init'

3. en la consola tecleamos 'git status'
	-me indica en que rama estamos
	-dice en que commit estamos  (commit: se refiere a una modificacion en el codigo)
	-git add nombreDelArchivo: subimos al stage, en el stage se ponen los archivos para despues ser comiteados

4.git commit "descripcion de cambio realizado "

5.git commit -m "descripcion de cambio realizado "

5. git add . "agrega todos los archivos al stage"
	
7. Sacamos un archivo del staging index con 
			'git rm --cached nombreDelArchivo.txt'

8. Para ignorar uno o varios archivos creamos el archivo .gitignore y dentro indicamos el nombre de los archivos con su extension que 
			wueremos que sean ignorados o no subir al stage

9. GIT LOG nos muestra todos los commits o modificaciones que hemos hecho

10. git log --stat  'este comando nos permipe ver mas desglosados los commits'
		-cuantos archivos modificados
		-cuantas lineas agregadas, modificadas o eliminadas etc...

11. git log --oneline
		muestra os commits ordenados con sus ids y sin descripciones

12. git log --graph
		nos muestra una grafica de tosos los cambios o commits 

13. git log --online --graph --all
		muestra el log y grafica de todos	

14. git diff 
		muestra la diferencia entre el commit pasado y el la nueva modificacion			

15. git diff 		idCommit_1 idCommit_2 archivoAComparar.html			(ES DE LOS MAS IMPORTANTES)
		me mostrara la diferencia entre esos 2 commits

16. git checkout 'idCommitAlQueQueremosRegresar'		
		nos regresa a la version del id_delComit que le indiquemos

17. 'git checkout master'
		ese comando nos permite pasar de una rama a otra 		

18. 'git checkout -b 'nuevaRama'
		Duplicamos nuestro proyecto (como si fuera un borrador)
		creamos una nueva rama y al mismo tiempo nos cambia a esta nueva rama con el nombre 'nuevaRama' o el que le hayamos indicado
		en esta nueva rama podemos trabajar y hasta crear nuevos archivos y si queremos cambiar a la rama anterior debemos dar solo 'git checkout master' puede ser master o nombre de la rama en la version que queremos volver

19. 'git branch' 
		con este comando me muestra las ramas existentes y en que rama actual estoy trabajando

20. 'git merge RamaExperimento'
		si estamos dentro de la rama master la forma de unir las ramas es con este comando 

21. 'git branch -d experimento' 
		con este comando eliminamos la rama experimento

22. SUBIR UN REPOSITORIO DESDE NUESTRA COMPUTADORA A GITHUB
		-Agregamos la url en gitbash que nos genera github para hacer push desde nuestro repositorio creado en local hacia github

					'git remote add origin https://github.com/Darx51/test.git'

		-Revisamos que ya tenemos el repositorio de github llamado 'origin'agregaNdo con el comando"

					  'git remote -v'

23. Hacemos el Envio de nuestro repositorio local hacia nuestro repositorio en Github llamado origin con el siguiente comando:

				      'git push -u origin master'
		
		origin: es el nombre del repositorio de github 
		master: es el nombre de la rama en git desde donde subiremos el repositorio que queremos CLONAR

24. DESCARGAR REPOSITORIO DESDE GUTHUB HACIA NUESTRA COMPUTADORA

					'git pull origin master'

			origin: hace referencia a que traeremos los archivos desde el repositirio llamado 'origin' en Github
			master: se refiere a que el repositirio que traeremos se alojara en la rama 'master'


25. CLONAR UN REPOSITORIO EN GITBASH O LA TERMINAL
	
		'git clone https://github.com/cursowebfalconmaster'
		
     siempre sera el comando git clone y la url del repositirio que nos da Github
     
     
     
     
     
     
     
     
     
     
     				******************** Publicar un website en Github desde Git ***************
				
1- Crear un repositorio en Github dentro del repositorio con mi usuario principal Darx51
 	
			ejemplo: 'bakery.github.io' o 'bakery' simplemente en caso de vinvularlo con la rama 'gh-pages' en git
			
			
			
			
	OOOJOOO : los repositorios en Github inician asi: 
					
					'https://github.com/Darx51/bakery.github.io' 
					
	  <meta>    pero al momento de agregar el link en las etiquetas meta dentro del html debe ir el link 
	      		generado por github, en este por ejemplo quedaria de la siguiente forma:
				
					'https://darx51.github.io/bakery.github.io/'
			
			

2- Posicionarme en el directorio del proyecto a subir
2.1- En git iniciar normal:
	'con git init'
	
3- Crea una nueva rama 'git branch 'nombre_de_la_rama'
3.1- Cambiamos de rama si queremos vincular esa rama con el repositorio de Github por ejemplo:
	'git checkout -b testing_branch'
	
3.2-      OJO Para los websites debemos agregar la rama en git 'gh-pages' 
	
4- Agregamos todos los archivos con 
	'git add .'	
	
5- Hacemos un commit:
	'git commit -m "subiremos website a github"

6- Copiamos la url que nos genero gighub al momento de crear nuestro repositorio para subir nuestros proyectos desde git 
	por ejemplo:
	
			'git remote add origin https://github.com/Darx51/test.git'
	 		
			origin: hace referencia al repositorio recien creado en github pero el nombre de origin lo 
				podemos cambiar por cualquier otro nombre que queramos por ejemplo origin_gallery, 
				solo deberemos tomarlo en cuanta al hacer push deberia ser 'git push -u origin_galleri tester_branch'
				
	
7- Tecleamos este comando:
	
		'git push -u origin tester_branch'	
		tester_branch: es el nombre de la rama en git desde donde subiremos el repositorio que queremos CLONAR
		OJO Para los websites debemos agregar la rama en git 'gh-pages'   'git push -u origin gh-pages'
     
8- Actualizamos el repositorio en Github y nos debe aparecer los archivos subidos recientemente
	-Nos bamos a setings 
		- Github Pages
		
	-si no esta configurado damos click en 'Check it out here!'
	
	-Ahi seleccionamos:
		-la rama de git desde donde subimos nuestro proyecto
		- Y tambien podemos elegir root o docs, en nuestro caso elegimos docs y guardamos y listo
			
			
			
			
NOTA:
	Para eliminar un repositorio remoto de github desde git lo hacemos asi:
	
	git remote -v       (nos muestra todos los repositorios remotos ya creados)
	git remote rm origin	(eliminamos el repositorio llamado origin)
			
			
			
